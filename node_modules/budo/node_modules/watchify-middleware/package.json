{
  "name": "watchify-middleware",
  "version": "1.6.0",
  "description": "a server for faster watchify development",
  "main": "index.js",
  "license": "MIT",
  "author": {
    "name": "Matt DesLauriers",
    "email": "dave.des@gmail.com",
    "url": "https://github.com/mattdesl"
  },
  "dependencies": {
    "concat-stream": "^1.5.0",
    "debounce": "^1.0.0",
    "events": "^1.0.2",
    "object-assign": "^4.0.1",
    "strip-ansi": "^3.0.0",
    "watchify": "^3.3.1"
  },
  "devDependencies": {
    "babelify": "^6.3.0",
    "brfs": "^1.4.1",
    "browserify": "^11.2.0",
    "faucet": "0.0.1",
    "garnish": "^2.3.0",
    "got": "^4.2.0",
    "minimist": "^1.1.3",
    "semver": "^5.0.3",
    "simple-html-index": "^1.0.1",
    "tape": "^4.2.0"
  },
  "scripts": {
    "start": "node example/server.js ",
    "test": "node test/index.js | faucet"
  },
  "keywords": [
    "watchify",
    "server",
    "fast",
    "reload",
    "incremental",
    "suspend",
    "request",
    "response",
    "wait",
    "delay",
    "live",
    "browser",
    "browserify"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/mattdesl/watchify-middleware.git"
  },
  "homepage": "https://github.com/mattdesl/watchify-middleware",
  "bugs": {
    "url": "https://github.com/mattdesl/watchify-middleware/issues"
  },
  "readme": "# watchify-middleware\n\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\nA simple middleware for watchify which provides a few features for a better development experience:\n\n- suspends the server response so you are never served a stale or empty bundle\n- removes the default 600ms delay (left up to the developer to reconfigure)\n- emits timing information in a `'log'` event\n- (optional) allows for a browser-based error handler (eg: print to DevTools console)\n\nFor practical implementations, see [watchify-server](https://www.npmjs.com/package/watchify-server) or [budo](https://www.npmjs.com/package/budo).\n\n## Install\n\n```sh\nnpm install watchify-middleware --save\n```\n\n## Example\n\n```js\nvar watchifyMiddleware = require('watchify-middleware')\nvar defaultIndex = require('simple-html-index')\n\nvar staticUrl = 'bundle.js'\nvar bundler = browserify('app.js', {\n  // config for watchify\n  cache: {}, \n  packageCache: {},\n  basedir: __dirname \n})\nvar watchify = watchifyMiddleware(bundler)\n\nvar server = http.createServer(function (req, res) {\n  if (req.url === '/') {\n    defaultIndex({ entry: staticUrl }).pipe(res)\n  } else if (req.url === '/' + staticUrl) {\n    watchify(req, res)\n  }\n})\n\nserver.listen(8000, 'localhost', function () {\n  console.log('Listening on http://localhost:8000/')\n})\n```\n\nFor a more complete example, see [example/server.js](example/server.js).\n\n## Usage\n\n[![NPM](https://nodei.co/npm/watchify-middleware.png)](https://www.npmjs.com/package/watchify-middleware)\n\n#### `middleware = watchifyMiddleware(browserify[, opt])`\n\nReturns a `middleware(req, res)` function from the given `browserify` bundler instance and options:\n\n- `delay` (default 0) a delay to debounce the rebuild, useful for things like git branch switches (where hundreds of files may change at once)\n- `errorHandler` (default false) a boolean or function for handling errors\n- `initialBundle` (default true) whether to initially bundle and emit `'pending'`\n\n`errorHandler` can be a function that accepts `(err)` parameter and optionally returns the new contents (String|Buffer) of the JavaScript bundle. If `errorHandler` is `true`, it will default to the following:\n\n```js\nvar stripAnsi = require('strip-ansi')\n\nfunction defaultErrorHandler (err) {\n  console.error('%s', err)\n  var msg = stripAnsi(err.message)\n  return ';console.error(' + JSON.stringify(msg) + ');'\n}\n```\n\n  <sup>(some plugins produce ANSI color codes in error messages)</sup>\n\nOtherwise, it assumes the normal behaviour for error handling (which is typically just an uncaught error event).\n\n#### `emitter = watchifyMiddleware.emitter(browserify[, opt])`\n\nThe same as above, except this returns an EventEmitter for handling bundle updates.\n\n##### `emitter.middleware`\n\nThe `middleware(req, res)` function for use in your server.\n\n##### `emitter.bundle()`\n\nTriggers a bundle event. Usually should only be called if `initialBundle` is set to false, to trigger the initial bundle.\n\n##### `emitter.on('pending', fn)`\n\nCalled when watchify begins its incremental rebuild.\n\n##### `emitter.on('update', fn)`\n\nCalled when bundling is finished, with parameter `(contents, rows)`. \n\n`contents` is a Buffer/String of the bundle and `rows` is a list of dependencies that have changed since last update. On first run, this will be an empty array.\n\n##### `emitter.on('log', fn)`\n\nProvides timing and server request logging, passing an `(event)` parameter.\n\nServer request logs look like this:\n\n```js\n{ level: 'debug', type: 'request', message: 'bundle (pending|ready)'}\n```\n\nBundle updates look like this:\n\n```js\n{ elapsed: Number, level: 'info', type: 'bundle' }\n```\n\nThese events work well with [garnish](https://github.com/mattdesl/garnish) and other ndjson-based tools.\n\n##### `emitter.on('error', fn)`\n\nIf `errorHandler` was `fasle`, this will get triggered on bundle errors. If an error handler is being used, this will not get triggered.\n\n##### `emitter.on('bundle-error', fn)`\n\nThis will get triggered on bundle errors, regardless of whether `errorHandler` is being used. This can be used to respond to syntax errors, such as showing a stylized notification.\n\n##### `emitter.close()`\n\nCloses the `watchify` instance and stops file watching.\n\n#### `version = watchifyMiddleware.getWatchifyVersion()`\n\nPrimarily useful for debugging, this will return the *actual* version number of the `watchify` module being used by `watchify-middleware`.\n\n## running the demo\n\nTo run the example, first git clone and install dependencies.\n\n```sh\ngit clone https://github.com/mattdesl/watchify-middleware.git\ncd watchify-middleware\nnpm install\n```\n\nThen:\n\n```sh\nnpm start\n```\n\nAnd open [http://localhost:8000/](http://localhost:8000/). Try making changes to [example/app.js](example/app.js) and you will see timing information in console, and reloading the browser will provide the new bundle.\n\n## License\n\nMIT, see [LICENSE.md](http://github.com/mattdesl/watchify-middleware/blob/master/LICENSE.md) for details.\n",
  "readmeFilename": "README.md",
  "_id": "watchify-middleware@1.6.0",
  "dist": {
    "shasum": "6db6e28f0279de1ca1209ae4f1a7f063745877c4"
  },
  "_from": "watchify-middleware@^1.6.0",
  "_resolved": "https://registry.npmjs.org/watchify-middleware/-/watchify-middleware-1.6.0.tgz"
}
